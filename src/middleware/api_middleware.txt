
REDUX API MIDDLEWARE NOTES

-- Portable middleware for any project

Modularize middleware (reusable not opinionated)

Importance of nested structure of state

Define schemas outside middleware 

Modules/Schemas - defines how data is organized

Export schemas

import { normalize } in middleware

Response from API every time -- normalize -- parse -- nested objects (flattening it)

Example npm normalizr

Post nested object structure & interrelated (comments, ids, users)

Reshapes structure not content

Import normalize and schema

Define schemas

Only interested in nested relations

Commenter is a user (entity predefined) - commenter key that responds to user schema

Normalize overall as schema article

(Inmutable JS Â¿?)

ID default key enntry normalized

entities : data in a flattened way

(ID, interrelated, requirements ... ?)

Entities === number of defined schemas

SST (interrelated data referring same user schema in naritcle author and in users)

Entities parsed in entities prop

---

Normalizing json from fetch in the call

Refactor API func call

Level up indentation

Typed CALL_API action creator

Middleware

Action transporting meta info for the call

Next(action) -- go to the next middleware

Deconstruct - extract data from action object

Array deconstructionn of types

Array
Action dispatched have types

Promisified middleware

Add CALL_API into action to be processed by middleware

***

delete with action with to not enter in an infinite loop back to middleware

NEXT VS DISPATCH

redux thunks

REDUX THUNK VS REDUX API MIDDLEWARE

Compatible




































